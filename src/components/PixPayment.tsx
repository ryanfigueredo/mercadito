"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { useCart } from "@/lib/cart";
import type { PaymentData } from "@/types";

interface PixPaymentProps {
  onSuccess: (data: PaymentData) => void;
  onError: (error: string) => void;
  deliveryAddress: {
    street: string;
    city: string;
    state: string;
    zip: string;
  };
}

export default function PixPayment({
  onSuccess,
  onError,
  deliveryAddress,
}: PixPaymentProps) {
  const [loading, setLoading] = useState(false);
  const [pixData, setPixData] = useState<PaymentData | null>(null);
  const [checkingPayment, setCheckingPayment] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);
  const items = useCart((s) => s.items);

  const handlePixPayment = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/checkout/pagarme-pix", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          items: items.map((item) => ({
            id: item.id,
            name: item.name,
            price: item.price,
            quantity: item.qty,
          })),
          deliveryAddress,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Erro ao processar pagamento PIX");
      }

      setPixData(data);
      // NÃO chama onSuccess aqui - aguarda o webhook confirmar o pagamento
      setCheckingPayment(true);
    } catch (error: unknown) {
      onError(
        error instanceof Error ? error.message : "Erro ao processar pagamento"
      );
    } finally {
      setLoading(false);
    }
  };

  const checkPaymentStatus = async () => {
    if (!pixData?.orderId) return;

    try {
      const response = await fetch(`/api/checkout/status/${pixData.orderId}`);
      const status = await response.json();

      if (status.paid) {
        setCheckingPayment(false);
        onSuccess(pixData);
      }
    } catch (error) {
      console.error("Erro ao verificar pagamento:", error);
    }
  };

  // Gerar PIX automaticamente quando o componente for montado
  useEffect(() => {
    if (!autoGenerated && !pixData && !loading) {
      setAutoGenerated(true);
      handlePixPayment();
    }
  }, [autoGenerated, pixData, loading]);

  // Polling para verificar status do pagamento
  useEffect(() => {
    if (!checkingPayment || !pixData) return;

    const interval = setInterval(checkPaymentStatus, 3000); // Verifica a cada 3 segundos
    return () => clearInterval(interval);
  }, [checkingPayment, pixData]);

  if (pixData) {
    return (
      <div className="space-y-3">
        <div className="text-center">
          <p className="text-sm text-muted-foreground">
            Escaneie o QR Code ou copie o código PIX
          </p>
        </div>

        {pixData.pixQrCodeUrl ? (
          <div className="flex justify-center">
            <img
              src={pixData.pixQrCodeUrl}
              alt="QR Code PIX"
              className="w-48 h-48 border rounded-lg"
            />
          </div>
        ) : (
          <div className="text-center p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <p className="text-yellow-700 text-sm">QR Code não disponível</p>
            <p className="text-yellow-600 text-xs">
              Aguarde alguns instantes ou tente novamente
            </p>
          </div>
        )}

        <div className="space-y-2 text-center">
          <Button
            variant="outline"
            size="sm"
            onClick={() => {
              navigator.clipboard.writeText(pixData.pixQrCode || "");
              alert("Código PIX copiado! Cole no seu app do banco.");
            }}
            className="w-full"
          >
            Copiar Código PIX
          </Button>
          <p className="text-xs text-muted-foreground">
            Cole este código no app do seu banco para pagar
          </p>
        </div>

        <div className="text-center text-sm text-muted-foreground">
          <p>Valor: R$ {pixData.total.toFixed(2)}</p>
          <p>
            Expira em: {Math.floor((pixData.expiresIn || 3600) / 60)} minutos
          </p>
        </div>

        {checkingPayment && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 text-center">
            <div className="animate-spin w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full mx-auto mb-2"></div>
            <p className="text-blue-700 text-sm">
              Aguardando confirmação do pagamento...
            </p>
            <p className="text-blue-600 text-xs mt-1">
              Pague o PIX e aguarde alguns instantes
            </p>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="text-center">
        <h3 className="text-lg font-semibold mb-2">Pagamento PIX</h3>
        <p className="text-sm text-muted-foreground">
          {loading
            ? "Gerando pagamento PIX..."
            : "Pague instantaneamente com PIX"}
        </p>
      </div>

      {loading && (
        <div className="flex justify-center">
          <div className="animate-spin w-8 h-8 border-2 border-[#F8B075] border-t-transparent rounded-full"></div>
        </div>
      )}
    </div>
  );
}

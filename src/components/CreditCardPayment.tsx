"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useCart } from "@/lib/cart";
import AddressSelector from "./AddressSelector";
import type { PaymentData, CardData } from "@/types";

interface CreditCardPaymentProps {
  onSuccess: (data: PaymentData) => void;
  onError: (error: string) => void;
  onProcessingChange?: (processing: boolean) => void;
  deliveryAddress: {
    street: string;
    city: string;
    state: string;
    zip: string;
  };
}

export default function CreditCardPayment({
  onSuccess,
  onError,
  onProcessingChange,
  deliveryAddress,
}: CreditCardPaymentProps) {
  const [loading, setLoading] = useState(false);
  const [cardData, setCardData] = useState<CardData>({
    number: "",
    holderName: "",
    expMonth: "",
    expYear: "",
    cvv: "",
    installments: 1,
    zipCode: "",
    city: "",
    state: "",
  });
  const [autoGenerated, setAutoGenerated] = useState(false);
  const [paymentProcessed, setPaymentProcessed] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState<any>(null);
  const [showAddressSelector, setShowAddressSelector] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const [installmentOptions, setInstallmentOptions] = useState<
    Array<{ installments: number; amount: number; hasInterest: boolean }>
  >([]);
  const items = useCart((s) => s.items);

  // Calcular opções de parcelamento com juros
  const calculateInstallments = () => {
    const totalAmount = items.reduce(
      (sum, item) => sum + item.price * item.qty,
      0
    );
    const options = [];

    for (let installments = 1; installments <= 12; installments++) {
      let amount = totalAmount;
      let hasInterest = false;

      if (installments <= 3) {
        // 1x a 3x: sem juros
        amount = totalAmount;
        hasInterest = false;
      } else if (installments <= 6) {
        // 4x a 6x: juros baixos (2% ao mês)
        const monthlyRate = 0.02;
        const totalWithInterest =
          totalAmount * Math.pow(1 + monthlyRate, installments);
        amount = totalWithInterest;
        hasInterest = true;
      } else {
        // 7x a 12x: juros altos (4% ao mês)
        const monthlyRate = 0.04;
        const totalWithInterest =
          totalAmount * Math.pow(1 + monthlyRate, installments);
        amount = totalWithInterest;
        hasInterest = true;
      }

      options.push({
        installments,
        amount: amount / installments,
        hasInterest,
      });
    }

    setInstallmentOptions(options);
  };

  const handleSubmit = async (e?: React.FormEvent) => {
    if (e) e.preventDefault();
    setLoading(true);
    setPaymentError(null);
    onProcessingChange?.(true);

    try {
      const response = await fetch("/api/checkout/pagarme-credit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          items: items.map((item) => ({
            id: item.id,
            name: item.name,
            price: item.price,
            quantity: item.qty,
          })),
          deliveryAddress,
          cardData: {
            number: cardData.number.replace(/\s/g, ""),
            holderName: cardData.holderName,
            expMonth: cardData.expMonth,
            expYear: cardData.expYear,
            cvv: cardData.cvv,
            installments: cardData.installments,
            billingAddress: {
              line1: "Endereço de cobrança",
              zipCode: cardData.zipCode,
              city: cardData.city,
              state: cardData.state,
            },
          },
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Erro ao processar pagamento");
      }

      // Verificar status do Pagar.me
      const charge = data.charges?.[0];
      if (charge) {
        if (charge.status === "paid" || charge.status === "approved") {
          // Pagamento aprovado - prosseguir
          setPaymentProcessed(true);
          onSuccess(data);
        } else if (
          charge.status === "failed" ||
          charge.status === "denied" ||
          charge.status === "refused"
        ) {
          // Pagamento negado - mostrar erro
          const errorMessage =
            "Cartão não foi aceito. Verifique os dados ou tente outro cartão.";
          setPaymentError(errorMessage);
          onError(errorMessage);
        } else {
          // Status pendente ou outro
          const errorMessage =
            "Pagamento em processamento. Aguarde a confirmação.";
          setPaymentError(errorMessage);
          onError(errorMessage);
        }
      } else {
        // Sem dados de cobrança
        const errorMessage = "Erro ao processar pagamento. Tente novamente.";
        setPaymentError(errorMessage);
        onError(errorMessage);
      }
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : "Erro ao processar pagamento";
      setPaymentError(errorMessage);
      onError(errorMessage);
    } finally {
      setLoading(false);
      onProcessingChange?.(false);
    }
  };

  // Gerar pagamento automaticamente quando o componente for montado
  useEffect(() => {
    if (!autoGenerated && !paymentProcessed && !loading) {
      setAutoGenerated(true);
      // Não processar automaticamente - aguardar preenchimento do formulário
    }
  }, [autoGenerated, paymentProcessed, loading]);

  // Calcular parcelas quando o componente montar
  useEffect(() => {
    calculateInstallments();
  }, [items]);

  // Pré-preencher dados do endereço quando selecionado
  useEffect(() => {
    if (selectedAddress) {
      setCardData((prev) => ({
        ...prev,
        zipCode: selectedAddress.zip,
        city: selectedAddress.city,
        state: selectedAddress.state,
      }));
    }
  }, [selectedAddress]);

  const formatCardNumber = (value: string) => {
    return value
      .replace(/\s/g, "")
      .replace(/(\d{4})(?=\d)/g, "$1 ")
      .substring(0, 19);
  };

  const formatExpirationDate = (value: string) => {
    const cleaned = value.replace(/\D/g, ""); // Remove caracteres não numéricos
    let formatted = "";
    if (cleaned.length > 0) {
      formatted = cleaned.substring(0, 2); // Mês
      if (cleaned.length > 2) {
        formatted += "/" + cleaned.substring(2, 4); // Ano
      }
    }
    return formatted;
  };

  const handleExpirationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formattedValue = formatExpirationDate(e.target.value);
    setCardData((prev) => {
      const [month, year] = formattedValue.split("/");
      return {
        ...prev,
        expMonth: month || "",
        expYear: year || "",
      };
    });
  };

  if (paymentProcessed) {
    return (
      <div className="space-y-4">
        <div className="text-center">
          <h3 className="text-lg font-semibold mb-2">Pagamento Aprovado!</h3>
          <p className="text-sm text-green-600">
            Seu pagamento foi processado com sucesso
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-1 h-full">
      <div className="text-center">
        <p className="text-sm text-muted-foreground">
          {loading
            ? "Processando pagamento..."
            : "Preencha os dados do seu cartão"}
        </p>
      </div>

      {loading && (
        <div className="flex justify-center">
          <div className="animate-spin w-6 h-6 border-2 border-[#F8B075] border-t-transparent rounded-full"></div>
        </div>
      )}

      {/* Mensagem de erro do pagamento */}
      {paymentError && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center space-x-2">
            <div className="flex-shrink-0">
              <svg
                className="w-5 h-5 text-red-600"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="flex-1">
              <p className="text-sm font-medium text-red-800">{paymentError}</p>
            </div>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-3">
        <div>
          <Label htmlFor="cardNumber">Número do Cartão</Label>
          <Input
            id="cardNumber"
            type="text"
            placeholder="0000 0000 0000 0000"
            value={cardData.number}
            onChange={(e) =>
              setCardData({
                ...cardData,
                number: formatCardNumber(e.target.value),
              })
            }
            maxLength={19}
            required
          />
        </div>

        <div>
          <Label htmlFor="holderName">Nome no Cartão</Label>
          <Input
            id="holderName"
            type="text"
            placeholder="Nome como está no cartão"
            value={cardData.holderName}
            onChange={(e) =>
              setCardData({
                ...cardData,
                holderName: e.target.value.toUpperCase(),
              })
            }
            required
          />
        </div>

        <div className="grid grid-cols-2 gap-2">
          <div>
            <Label htmlFor="expirationDate">Validade Mes/Ano (MM/AA)</Label>
            <Input
              id="expirationDate"
              type="text"
              placeholder="MM/AA"
              value={formatExpirationDate(
                `${cardData.expMonth}${cardData.expYear}`
              )}
              onChange={handleExpirationChange}
              maxLength={5}
              required
            />
          </div>
          <div>
            <Label htmlFor="cvv">CVV</Label>
            <Input
              id="cvv"
              type="text"
              placeholder="000"
              value={cardData.cvv}
              onChange={(e) =>
                setCardData({
                  ...cardData,
                  cvv: e.target.value.replace(/\D/g, "").substring(0, 3),
                })
              }
              maxLength={3}
              required
            />
          </div>
        </div>

        <div>
          <Label htmlFor="installments">Parcelas</Label>
          <select
            id="installments"
            className="w-full p-2 border rounded-md"
            value={cardData.installments}
            onChange={(e) =>
              setCardData({
                ...cardData,
                installments: parseInt(e.target.value) || 1,
              })
            }
            required
          >
            {installmentOptions.map((option) => (
              <option key={option.installments} value={option.installments}>
                {option.installments}x de R$ {option.amount.toFixed(2)}
                {option.hasInterest ? " (com juros)" : " (sem juros)"}
              </option>
            ))}
          </select>
        </div>

        <AddressSelector
          onAddressSelect={setSelectedAddress}
          onAddressChange={() => setShowAddressSelector(!showAddressSelector)}
          selectedAddress={selectedAddress}
        />

        {/* Informações sobre parcelamento */}
      </form>
    </div>
  );
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Basic e-commerce models (MVP)

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  document  String?   // CPF/CNPJ para Pagar.me
  phone     String?   // Telefone para Pagar.me
  isAdmin   Boolean   @default(false) // Permissão para acessar área admin
  addresses Address[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  label     String   // e.g. "Casa"
  street    String
  city      String
  state     String
  zip       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Product {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  category  String
  priceCents Int
  stock     Int      @default(0) // Quantidade em estoque
  imageUrl  String?
  promoText String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     OrderItem[]
}

model Order {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  status          OrderStatus  @default(PENDING)
  totalCents      Int
  items           OrderItem[]
  paymentMethod   String?      // 'pagarme_pix', 'pagarme_credit'
  pagarmeOrderId  String?      // ID do pedido no Pagar.me
  pagarmeChargeId String?      // ID da cobrança no Pagar.me
  pixQrCode       String?      // QR Code PIX
  pixQrCodeUrl    String?      // URL do QR Code PIX
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model OrderItem {
  id         String  @id @default(cuid())
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  unitPriceCents Int
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}
